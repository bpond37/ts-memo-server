{"version":3,"sources":["components/editor/EditorTemplate.tsx","constants.ts","components/TopBar/index.tsx","components/utils.ts","components/editor/Editor/index.tsx","components/editor/Memos/Memo/index.tsx","components/editor/Memos/index.tsx","pages/EditorPage.tsx","components/PrivateRouter/index.tsx","styles/palette.ts","pages/Login.tsx","pages/Register.tsx","App.tsx","serviceWorker.ts","services/AuthService.ts","stores/auth/AuthStore.ts","stores/memo/MemoStores.ts","services/MemoService.ts","stores/RootStore.ts","providers/StoreProvider.tsx","index.tsx","Icons/pen.svg","Icons/trashcan.svg"],"names":["StyledDiv","styled","div","EditorTemplate","topBar","editor","preview","useState","leftPercentage","setLeftPercentage","handleMouseMove","e","clientX","window","innerWidth","leftStyle","flex","rightStyle","separatorStyle","left","handleMouseUp","document","body","removeEventListener","className","style","onMouseDown","addEventListener","STORES","PAGE_PATHS","inject","MEMO_STORE","AUTH_STORE","observer","props","newMemo","setIndex","deleteMemo","selectedId","logout","history","TopBarBlock","Button","onClick","src","pen","width","height","alt","trashcan","Logout","console","log","push","getDateFormat","time","moment","locale","format","shortenLine","text","undefined","slice","removeHtml","html","sanitizeHtml","allowedTags","ISOStringToJsDate","t","Date","getTime","jsDateToISOString","toISOString","setMemo","memo","updateMemo","syncTitle","syncContents","initialMemo","id","title","createdAt","now","updatedAt","contents","useEffect","EditorBlock","StyledInputTitle","type","value","onChange","tempTitle","target","placeholder","StyledTextarea","tempContents","input","textarea","Memo","selectMemo","selected","MemoItem","defaultChecked","Item","fromNow","memos","getMemoById","getMemoList","MemosBlock","sort","a","b","map","v","key","Component","component","redirectTo","authStore","path","exact","render","isLoggedIn","to","palette","gray","resetPasswordAndEmail","handleLogin","preventDefault","stopPropagation","login","EDITER","alert","response","data","msg","Helmet","LoginForm","WhiteBox","StyledInput","email","setEmail","password","setPassword","StyledButton","SIGNUP","button","rePassword","setRePassword","handleRegister","length","register","result","SIGNIN","EditorPage","Login","Register","Boolean","location","hostname","match","API_HOST","process","AuthService","axios","post","get","AuthStore","autobind","authService","this","token","auth","jwtDecode","reaction","sessionStorage","setItem","setToken","checkLogin","removeItem","pw","observable","getItem","action","MemoStore","memoService","list","setMemos","getRecentUpdatedMemo","registerMemo","tempMemos","lastId","tempMemo","find","item","index","indexOf","selectedIndex","splice","Error","userId","formData","FormData","append","String","headers","req","patch","delete","RootStore","memoStore","MemoService","instance","rootStore","StoreProvider","children","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.816ac9ef.chunk.js","sourcesContent":["import React,{useState} from 'react'\nimport styled from 'styled-components'\n\nconst StyledDiv = styled.div`\n  &.panes{\n    height : calc(100vh - 3rem);\n    display : flex;\n  }\n  &.pane{\n    display:flex;\n    flex:1;\n    &.preview{\n      @media(max-width:768px){\n      flex:0;\n      /* display:none; */\n      }\n    &.editor{\n      @media(max-width:768px){\n      flex:1;\n      }\n    }\n    }\n  }\n  &.seperator{\n    @media(max-width:768px){\n    display:none;\n    }\n    height:100%;\n    position:absolute;\n    transform : translate(-50%);\n    cursor: col-resize;\n    border-left: 1px solid;\n    border-color: lightgray\n  }\n`\n\nexport default function EditorTemplate ({topBar, editor, preview}:any){\n\n  const [leftPercentage, setLeftPercentage] = useState(0.2)\n\n  const handleMouseMove = (e:any) =>{\n    setLeftPercentage(e.clientX/window.innerWidth)\n  }\n  const leftStyle = {\n    flex: leftPercentage\n  }\n  const rightStyle = {\n    flex: 1-leftPercentage\n  }\n  const separatorStyle ={\n    left: `${leftPercentage*100}%`\n  }\n  const handleMouseUp = (e:any)=>{\n    document.body.removeEventListener('mousemove', handleMouseMove)\n    window.removeEventListener('mouseup', handleMouseUp)\n  }\n\n  const handleSeparatorMousdeDown = (e:any) =>{\n    document.body.addEventListener('mousemove', handleMouseMove);\n    window.addEventListener('mouseup', handleMouseUp)\n  }\n\n  return(\n    <StyledDiv>\n      {topBar}\n      <StyledDiv className='panes'>\n        <StyledDiv className='pane preview' style={leftStyle}>\n          {preview}\n        </StyledDiv>\n        <StyledDiv className='pane editor' style={rightStyle}>\n          {editor}\n        </StyledDiv>\n        <StyledDiv \n          className='seperator'\n          style={separatorStyle}\n          onMouseDown={handleSeparatorMousdeDown}\n        >\n        </StyledDiv>\n      </StyledDiv>\n    </StyledDiv>\n  )\n}","export enum STORES {\n  MEMO_STORE = 'memoStore',\n  AUTH_STORE = 'authStore',\n}\n\nexport enum PAGE_PATHS {\n  SIGNUP = '/login',\n  SIGNIN = '/regiser',\n  EDITER = '/'\n}","import React from 'react'\nimport styled from 'styled-components'\nimport pen from '../../Icons/pen.svg';\nimport trashcan from '../../Icons/trashcan.svg';\nimport MemoStore from '../../stores/memo/MemoStores';\nimport AuthStore from '../../stores/auth/AuthStore'\nimport { STORES } from '../../constants';\nimport { inject, observer } from 'mobx-react'\nimport { RouteComponentProps } from 'react-router'\n\ntype InjectedProps = {\n  [STORES.MEMO_STORE] : MemoStore\n  [STORES.AUTH_STORE] : AuthStore\n}\n\nfunction TopBar (props : InjectedProps & RouteComponentProps){\n  const { newMemo, setIndex, deleteMemo, selectedId } = props[STORES.MEMO_STORE]\n  const { logout } = props[STORES.AUTH_STORE]\n  const { history, } = props\n  \n  const onClickNew = () => {\n    newMemo()\n    setIndex()\n  }\n\n  const onClickDelete = (id:number) =>{\n    deleteMemo(id)\n  }\n\n  const handleLogout = () =>{\n    console.log('handlelogout')\n    logout()\n    history.push('/login');\n    // checkLogin()\n  }\n\n  return(\n    <TopBarBlock>\n      <TopBarBlock className='header'>\n        <h3>Ulendo</h3>\n        <Button onClick={onClickNew}>\n          <img src={pen} width={13} height={'auto'} alt={'new memo'} />\n        </Button>\n        <Button onClick={()=>onClickDelete(selectedId)}>\n          <img src={trashcan} width={13} height={'auto'} alt={'remove memo'} />\n        </Button>\n\n      </TopBarBlock>\n        {/* <h1>{auth}</h1> */}\n      <Logout onClick={handleLogout}>\n        <h4>\n          logout\n        </h4>\n      </Logout>\n\n    </TopBarBlock>\n  )\n}\n\nexport default inject(STORES.MEMO_STORE, STORES.AUTH_STORE)(observer(TopBar))\n\nconst Logout = styled.div`\n  padding-right: 2rem;\n`\n\nconst TopBarBlock = styled.div`\n  display : flex;\n  padding-left : 1rem;\n  background : whitesmoke;\n  height : 3rem;\n  border-bottom : 0.3px solid;\n  /* justify-content : center; */\n  border-bottom-color :lightgray;\n  align-items: center;\n  font-family:Arial, Helvetica, sans-serif;\n  justify-content:space-between;\n\n  &.header{\n    padding-left: 0;\n  }\n  `\n\nconst Button = styled.div`\n  background: white;\n  border-radius : 4px;\n  margin-left : 10px;\n  padding-top : 2px;\n  width : 40px;\n  height : 20px;\n  border : 0.5px solid lightgray;\n  font-size : 10;\n  /* align-items: center; */\n  justify-content: center;\n  vertical-align: middle;\n  text-align : center;\n  &:hover{\n    background: whitesmoke;\n  }\n`\n","import 'moment/locale/ko';\nimport sanitizeHtml from 'sanitize-html'\nimport moment from 'moment';\n\nexport const getDateFormat = (time:number)=>{\n  const date = moment(time)\n  // const date = new Date(time);\n  // const year = date.getFullYear()\n  // const month = date.getMonth()+1\n  // const day = date.getDate()\n  // const ampm = date.getHours() <12 ? \"오전\":\"오후\"\n  // const hours = date.getHours() % 12\n  // const minutes = date.getMinutes()<10? \"0\"+date.getMinutes(): date.getMinutes();\n  return date.locale('kr').format('lll')\n  // return year+\"년 \"+month+\"월 \"+ day+\"일 \" +ampm +\" \"+ hours+\":\"+minutes; \n}\n\n\nexport const shortenLine = (text:string) =>{\n  if (text===undefined){\n    text=''\n  }\n  return text.slice(0,10)\n}\n\nexport const removeHtml = (html:string) =>{\n  const filtered = sanitizeHtml(html, {\n      allowedTags: [],\n    })\n    return filtered.slice(0,10)\n  }\n\nexport const removeHtmlAndShorten = (body:string) =>{\n  const filtered = sanitizeHtml(body, {\n    allowedTags:[],\n  })\n  return filtered.length < 200? filtered : `${filtered.slice(0,200)}...`;\n}\n\nexport const ISOStringToJsDate = (t:string) =>{\n  const time = new Date(t)\n  return time.getTime()\n}\nexport const jsDateToISOString = (t:number) =>{\n  return moment(t).toISOString()\n}","import React, { ChangeEvent, useEffect} from 'react'\nimport styled from 'styled-components'\nimport { getDateFormat,ISOStringToJsDate, jsDateToISOString } from '../../utils';\nimport moment, {now} from 'moment';\nimport 'moment/locale/ko';\nimport { STORES } from '../../../constants';\nimport MemoStore from '../../../stores/memo/MemoStores';\nimport {inject, observer} from 'mobx-react'\n\ntype InjectedProps = {\n  [STORES.MEMO_STORE] : MemoStore\n}\n\nfunction Editor (props:InjectedProps){\n  \n  const {setMemo, memo, updateMemo, syncTitle, syncContents} = props[STORES.MEMO_STORE]\n  const initialMemo = {id:0, title:'', createdAt:moment(now()).toISOString() , updatedAt:moment(now()).toISOString(), contents: ''};\n\n  useEffect(()=>{\n    setMemo(initialMemo)\n  },[])\n\n  const handleTitle = (e:ChangeEvent<HTMLInputElement>) =>{\n    const tempTitle = e.target.value\n    setMemo({...memo, updatedAt:jsDateToISOString(now()), id:memo.id, title:tempTitle})\n    syncTitle(tempTitle)\n    updateMemo()\n  }\n\n  const handleContents = (e:ChangeEvent<HTMLTextAreaElement>) =>{\n    const tempContents = e.target.value\n    setMemo({...memo,id:memo.id, updatedAt:jsDateToISOString(now()), contents:tempContents})\n    syncContents(tempContents)\n    updateMemo()\n  }\n  \n  return(\n    <EditorBlock>\n      <EditorBlock className='createdDate'> \n        {getDateFormat(ISOStringToJsDate(memo.updatedAt))}\n      </EditorBlock>\n      <EditorBlock className='inputTitle'> \n        <StyledInputTitle \n          type='text' \n          value={memo.title} \n          onChange={handleTitle} \n          placeholder='title'\n        />\n      </EditorBlock>\n      <EditorBlock className='inputText'>\n        <StyledTextarea\n          value={memo.contents}\n          onChange={handleContents}\n          placeholder={'text'}\n        />\n      </EditorBlock>\n    </EditorBlock>\n  )\n}\n\nexport default inject(STORES.MEMO_STORE)(observer(Editor))\n\nconst EditorBlock = styled.div`\n  flex:1;\n  display: flex;\n  flex-direction:column;\n    /* @media(max-width:768px){\n    flex:1;\n    } */\n  &.createdDate{\n    height: 2rem;\n    flex:0;\n    padding-top : 0.5rem;\n    text-align : center;\n    font-size: 0.8rem;\n    color: darkgray;\n  }\n  &.inputTitle{\n    /* flex: 1; */\n    padding-left : 1rem;\n    padding-right : 1rem;\n    height:3rem;\n    font-size: 1rem;\n    height: 1rem;\n    flex:0;\n  }\n  &.inputText{\n    padding : 1rem;\n    font-size: 1rem;\n    height: 1rem;\n\n  }\n`\n  const StyledInputTitle = styled.input`\n    border: none;\n    font-size: 1.2rem;\n    font-weight: 600;\n    padding:0;\n    margin: 0;\n    padding: 0;\n    width: 100%;\n    font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n  `\n\n  const StyledTextarea = styled.textarea`\n    display: block;\n    font-size: 1rem;\n    font-weight: 400;\n    font-family: Arial, Helvetica, sans-serif;\n    border: 0px;\n    margin: 0;\n    padding: 0;\n    width: 100%;\n    height: calc(100% - 60px);\n    outline: none;\n    resize: none;\n  `\n","import React from 'react'\nimport styled from 'styled-components'\nimport {shortenLine, removeHtml} from '../../../utils';\nimport moment from 'moment';\n\ntype MemoProps = {\n  id: number;\n  title :string;\n  contents: string;\n  createdAt: string;\n  updatedAt: string;\n  selectMemo: (id:number)=>void;\n  selected : boolean;\n}\n\nfunction Memo (props:MemoProps) {\n  const {updatedAt, id, title, contents, selectMemo, selected} = props\n  return(\n    <MemoItem defaultChecked={selected} onClick={()=>selectMemo(id)}>\n      <Item className='title' >\n\n        {title===\"\"?\n        \"새로운 메모\":shortenLine(removeHtml(title))}\n      </Item>\n      <Item className='text'>\n        {shortenLine(removeHtml(contents))}\n      </Item>\n      <Item className='createdTime'>\n        {moment(updatedAt).locale('kr').fromNow()}\n      </Item>\n    </MemoItem>\n  )\n\n}\n\nexport default Memo\n\nconst MemoItem = styled.div`\n  /* padding: 1rem; */\n  flex-direction:column;\n  overflow-y : auto;\n  font-size: 1.2rem;\n  border-bottom : 1px solid;\n  border-bottom-color :lightgray;\n  height: 5rem;\n  background:${props => props.defaultChecked? 'lightgray' :'white'};\n  font-family: Arial, Helvetica, sans-serif;\n  &.title{\n    font-size: 2.5rem;\n    font-weight: 300;\n  }\n  &:hover{\n    background: lightgray;\n  }\n\n`\nconst Item = styled.div`\n  \n  padding-left : 1rem;\n  padding-top : 1rem;\n  font-size: 1rem;\n  &.title{\n    font-size : 1rem;\n    font-weight: bold;\n  }\n  &.createdTime{\n    padding-top: 0;\n    font-size: 0.8rem;\n    color:gray;\n  }\n  &.text{\n    padding-top : 0;\n    font-size: 0.8rem;\n    /* color:gray; */\n  }\n`","import React,{useEffect} from 'react'\nimport styled from 'styled-components'\nimport { STORES } from '../../../constants';\nimport MemoStore from '../../../stores/memo/MemoStores';\nimport {inject, observer} from 'mobx-react'\nimport Memo from './Memo'\nimport {ISOStringToJsDate} from '../../utils'\n\ntype InjectedProps = {\n  [STORES.MEMO_STORE] : MemoStore\n}\n\nfunction Memos (props:InjectedProps){\n\n  const {memos, getMemoById, selectedId, getMemoList} = props[STORES.MEMO_STORE]\n  \n  useEffect(()=>{\n    console.log(\"useEffect...\")\n    getMemoList()\n\n  },[])\n\n  const selectMemo = (id:number) => {\n    getMemoById(id)\n    // setIndex()\n    \n  }\n\n  return(\n    <MemosBlock>\n      {memos.slice(0).sort((a,b) => ISOStringToJsDate(b.updatedAt) - ISOStringToJsDate(a.updatedAt)).map((v)=>\n        <Memo \n          key={v.id}\n          createdAt={v.createdAt}\n          updatedAt={v.updatedAt}\n          id={v.id}\n          contents={v.contents}\n          title={v.title}\n          selectMemo={()=>selectMemo(v.id)}\n          selected={selectedId ===v.id }\n          />\n      )}\n    </MemosBlock>\n  )\n}\n\nexport default inject(STORES.MEMO_STORE)(observer(Memos))\n\nconst MemosBlock = styled.div`\n  display:flex; \n  flex-direction:column;\n  flex:1;\n  \n`","import React from 'react'\nimport {inject, observer} from 'mobx-react'\nimport EditorTemplate from '../components/editor/EditorTemplate'\nimport TopBar from '../components/TopBar'\nimport Editor from '../components/editor/Editor'\nimport MemoStore from '../stores/memo/MemoStores'\nimport AuthStore from '../stores/auth/AuthStore'\nimport { STORES } from '../constants'\nimport Memos from '../components/editor/Memos'\nimport { RouteComponentProps} from 'react-router'\n\ntype InjectedProps = {\n  [STORES.MEMO_STORE] : MemoStore\n  [STORES.AUTH_STORE] : AuthStore\n}\nfunction EditorPage (props:InjectedProps & RouteComponentProps){\n  return(\n    <EditorTemplate\n      topBar={<TopBar {...props}/>}\n      editor={<Editor {...props}/>}\n      preview={<Memos {...props}/>}\n      />\n  )\n}\n\nexport default inject(STORES.MEMO_STORE, STORES.AUTH_STORE)(observer(EditorPage))","import React from 'react';\nimport { Redirect, Route} from 'react-router-dom';\nimport { inject, observer } from 'mobx-react';\nimport { STORES } from '../../constants';\nimport AuthStore from '../../stores/auth/AuthStore';\n\ninterface PrivateRouterProps {\n  authStore?: AuthStore;\n  component: React.ComponentType<any>;\n  redirectTo: string;\n  path: string;\n  exact?: boolean;\n}\n\nexport default inject(STORES.AUTH_STORE)(\n  observer(\n    ({ component: Component, redirectTo, authStore, path, exact }: PrivateRouterProps) => {\n      return (\n        <Route\n          path={path}\n          exact={exact}\n          render={(props: any) =>\n            authStore!.isLoggedIn() ? (\n              <Component {...props} />\n            ) : (\n              <Redirect\n                to={redirectTo}\n              />\n            )\n          }\n        />\n      );\n    }\n  )\n);\n","const palette = {\n  gray: [\n    '#f8f9fa',\n    '#f1f3f5',\n    '#e9ecef',\n    '#dee2e6',\n    '#ced4da',\n    '#adb5bd',\n    '#868e96',\n    '#495057',\n    '#343a40',\n    '#212529',\n  ]\n};\n\nexport default palette;","import React,{ useEffect, ChangeEvent, MouseEvent } from 'react'\nimport { inject, observer } from 'mobx-react';\nimport { STORES, PAGE_PATHS } from '../constants'\nimport styled from 'styled-components'\nimport palette from '../styles/palette'\nimport {Link} from 'react-router-dom'\nimport AuthStore from '../stores/auth/AuthStore'\nimport { RouteComponentProps } from 'react-router'\nimport {Helmet} from 'react-helmet'\n\ninterface InjectedProps {\n  [STORES.AUTH_STORE] : AuthStore;\n}\n\nfunction Login (props: InjectedProps & RouteComponentProps){\n  \n  const {authStore, history} = props\n\n  useEffect(() => {\n    authStore.resetPasswordAndEmail();\n  }, [authStore]);\n\n  const handleLogin = async (e: MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    try {\n      await authStore.login();\n      history.push(PAGE_PATHS.EDITER);\n    } catch (err) {\n      alert(err.response.data.msg);\n    }\n  };\n  \n  const onChangeEmail = (e: ChangeEvent<HTMLInputElement>) =>{\n    authStore.setEmail(e.target.value);\n  }\n\n  const onChangePassword = (e: ChangeEvent<HTMLInputElement>)=>{\n    authStore.setPassword(e.target.value)\n  }\n\n  return(\n    <>\n    <Helmet>\n      <title>Login</title>\n    </Helmet>\n    <LoginForm>\n      <WhiteBox>\n        <h1>Log In</h1>\n        <StyledInput \n          placeholder='Email Address'\n          value={authStore.email}\n          onChange={onChangeEmail}\n        />\n        <StyledInput \n          type=\"password\"\n          placeholder='Password'\n          value={authStore.password}\n          onChange={onChangePassword}\n        />\n        <StyledButton onClick={handleLogin}>\n          Login with Email\n        </StyledButton>\n        <Link to={PAGE_PATHS.SIGNUP}>\n          Sign Up\n        </Link>\n      </WhiteBox>\n    </LoginForm>\n    </>\n  )\n}\n\nexport default inject(STORES.AUTH_STORE)(observer(Login));\n\n\nconst LoginForm = styled.div`\n  position :absolute;\n  left: 0;\n  top: 0;\n  bottom : 0;\n  right: 0;\n  /* background : ${palette.gray[2]}; */\n  /* flex 내부 내용 중앙 정렬 */\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  h1 {\n    text-align:center;\n    margin : 0;\n    color : ${palette.gray[8]};\n    margin-bottom : 1rem;\n  }\n`\n\nconst StyledButton = styled.button`\n  display:flex;\n  width: 100%;\n  border: none;\n  border-radius: 4px;\n  font-size: 1rem;\n  font-weight: bold;\n  padding: 0.5rem 1rem;\n  color: white;\n  outline: none;\n  margin-top: 1rem;\n  justify-content:center;\n  cursor: pointer;\n  \n  background: ${palette.gray[8]};\n  &:hover {\n    background: ${palette.gray[6]};\n  }\n`\n\nconst WhiteBox = styled.div`\n  .logo-area{\n    display: block;\n    padding-bottom: 2rem;\n    text-align: center;\n    font-weight: bold;\n    letter-spacing: 2px;\n  }\n  /* box-shadow: 0 0 8px rgba(0,0,0,0.025); */\n  text-align:right;\n  /* justify-content: right; */\n  padding: 2rem;\n  width: 360px;\n  background: white;\n  border-radius: 2px;\n`\n\nconst StyledInput = styled.input`\n  background: ${palette.gray[1]};\n  font-size:1rem;\n  border:none;\n  border-bottom: 1px solid ${palette.gray[5]};\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n  outline:none;\n  width:100%;\n  &:focus{\n    color:${palette.gray[7]};\n    border-bottom: 1px solid ${palette.gray[7]};\n  }\n  &+&{\n    margin-top: 1rem;\n  }\n`","import React,{ useState, ChangeEvent, MouseEvent } from 'react'\nimport { inject, observer } from 'mobx-react';\nimport { STORES, PAGE_PATHS } from '../constants'\nimport styled from 'styled-components'\nimport palette from '../styles/palette'\nimport {Link} from 'react-router-dom'\nimport AuthStore from '../stores/auth/AuthStore'\nimport { RouteComponentProps } from 'react-router'\nimport {Helmet} from 'react-helmet'\n\ninterface InjectedProps {\n  authStore : AuthStore;\n}\n\nfunction Register (props: InjectedProps & RouteComponentProps){\n\n  const { history } = props\n\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [rePassword, setRePassword] = useState(\"\");\n\n  const handleRegister = async (e: MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (password.length < 5) {\n      alert('비밀번호는 5글자 이상입니다.');\n      return false;\n    }\n    if (email.length < 5) {\n      alert('ID는 5글자 이상입니다.');\n      return false;\n    }\n    if (password !== rePassword) {\n      alert('입력하신 비밀번호가 비밀번호확인에 입력한 비밀번호와 다릅니다.');\n      return false;\n    }\n    try {\n      const result = await props.authStore.register({\n        email: email,\n        password: password,\n      });\n      history.push(PAGE_PATHS.SIGNIN);\n      alert(result.data.msg);\n    } catch (err) {\n      alert(err.response.data.msg);\n    }\n    return false;\n  };\n\n  const onChangeEmail = (e: ChangeEvent<HTMLInputElement>) =>{\n    setEmail(e.target.value);\n  }\n\n  const onChangePassword = (e: ChangeEvent<HTMLInputElement>)=>{\n    setPassword(e.target.value)\n  }\n\n  const onChangeRePassword = (e: ChangeEvent<HTMLInputElement>)=>{\n    setRePassword(e.target.value)\n  }\n\n  return(\n    <>\n    <Helmet>\n      <title>Sign Up</title>\n    </Helmet>\n    <LoginForm>\n      <WhiteBox>\n        <h1>Sign Up</h1>\n\n        <StyledInput \n          placeholder='Email Address'\n          value={email}\n          onChange={onChangeEmail}\n          ></StyledInput>\n        <StyledInput\n          type=\"password\"\n          value={password}\n          onChange={onChangePassword}\n          placeholder='Password'\n          ></StyledInput>\n        <StyledInput \n          type=\"password\"\n          placeholder='Confirm Password'\n          value={rePassword}\n          onChange={onChangeRePassword}\n        ></StyledInput>\n        <StyledButton onClick={handleRegister}>Continue with Email</StyledButton>\n        <Link to={PAGE_PATHS.SIGNIN}>Login</Link>\n      </WhiteBox>\n    </LoginForm>\n    </>\n  )\n}\n\nexport default inject(STORES.AUTH_STORE)(observer(Register))\n\n\nconst LoginForm = styled.div`\n  position :absolute;\n  left: 0;\n  top: 0;\n  bottom : 0;\n  right: 0;\n  /* background : ${palette.gray[2]}; */\n  /* flex 내부 내용 중앙 정렬 */\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  h1 {\n    text-align:center;\n    margin : 0;\n    color : ${palette.gray[8]};\n    margin-bottom : 1rem;\n  }\n`\n\nconst StyledButton = styled.button`\n  display:flex;\n  width: 100%;\n  border: none;\n  border-radius: 4px;\n  font-size: 1rem;\n  font-weight: bold;\n  padding: 0.5rem 1rem;\n  color: white;\n  outline: none;\n  margin-top: 1rem;\n  justify-content:center;\n  cursor: pointer;\n  \n  background: ${palette.gray[8]};\n  &:hover {\n    background: ${palette.gray[6]};\n  }\n`\n\nconst WhiteBox = styled.div`\n  .logo-area{\n    display: block;\n    padding-bottom: 2rem;\n    text-align: center;\n    font-weight: bold;\n    letter-spacing: 2px;\n  }\n  /* box-shadow: 0 0 8px rgba(0,0,0,0.025); */\n  text-align:right;\n  /* justify-content: right; */\n  padding: 2rem;\n  width: 360px;\n  background: white;\n  border-radius: 2px;\n`\n\nconst StyledInput = styled.input`\n  background: ${palette.gray[1]};\n  font-size:1rem;\n  border:none;\n  border-bottom: 1px solid ${palette.gray[5]};\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n  outline:none;\n  width:100%;\n  &:focus{\n    color:${palette.gray[7]};\n    border-bottom: 1px solid ${palette.gray[7]};\n  }\n  &+&{\n    margin-top: 1rem;\n  }\n`","import React from 'react';\nimport './App.css';\nimport EditorPage from './pages/EditorPage';\nimport { inject, observer} from 'mobx-react';\nimport { STORES } from './constants';\nimport PrivateRoute from './components/PrivateRouter'\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n} from 'react-router-dom';\nimport Login from './pages/Login';\nimport Register from './pages/Register';\nimport {Helmet} from 'react-helmet'\n\nfunction App () {\n  return (\n    <>\n    <Helmet>\n      <title>이름을뭘로하지..</title>\n    </Helmet>\n    <Router>\n      <Switch>\n        <PrivateRoute redirectTo='/login' exact path=\"/\" component ={EditorPage} />\n        {/* <Helmet>\n          <title>login</title>\n        </Helmet> */}\n        <Route exact path=\"/login\" component ={Login} >\n          \n        </Route>\n        <Route exact path=\"/register\" component ={Register} />\n      </Switch>\n    </Router>\n  </>\n  );\n}\n\nexport default inject(STORES.AUTH_STORE)(observer(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import axios from 'axios'\nimport { ApiResponse } from './types'\n\nexport type LoginResponseDto = {\n  token: string;\n  data: AuthDTO;\n}\n\nexport type AuthDTO = {\n  id: number;\n  email: string;\n  createdAt : number;\n  updatedAt? : number;\n}\n\nexport type LoginSignupRequestDto = {\n  email: string;\n  password: string;\n};\n\nexport type AuthResponseDto = {\n  id: string;\n  email: string;\n  password: string;\n}\n\nconst API_HOST = process.env.API_HOST || 'http://localhost:4000/api';\n\n// const client = axios.create({withCredentials: true});\n\nclass AuthService {\n  async login(body: LoginSignupRequestDto): Promise<ApiResponse<LoginResponseDto>> {\n    return axios.post(`${API_HOST}/auth/login`, body);\n  }\n\n  async register(body: LoginSignupRequestDto): Promise<ApiResponse<AuthResponseDto>> {\n    return axios.post(`${API_HOST}/auth/register`, body);\n  }\n\n  async checkLogin():Promise<ApiResponse<any>>{\n    return axios.get(`${API_HOST}/auth/check`)\n  }\n\n  // async logout():Promise<ApiResponse<any>>{\n  //   return axios.post(`${API_HOST}/auth/logout`)\n  // }\n}\n\nexport default AuthService;\n","import { action, observable, reaction } from 'mobx'\nimport AuthService, { LoginSignupRequestDto } from '../../services/AuthService'\nimport jwtDecode from 'jwt-decode';\nimport autobind from 'autobind-decorator';\n\nexport type Auth = {\n  email: string\n  id: number\n}\n\n@autobind\nclass AuthStore{\n  @observable token: string | null = window.sessionStorage.getItem('jwt');\n  @observable auth: Auth | undefined;\n  @observable email = '';\n  @observable password = '';\n  private authService = new AuthService();\n\n  constructor() {\n    if (this.token) {\n      this.auth = jwtDecode(this.token) as Auth;\n    }\n\n    reaction(\n      () => this.token,\n      token => {\n        if (token != null) window.sessionStorage.setItem('jwt', token);\n      }\n    );\n  }\n\n  isLoggedIn() {\n    return this.token != null;\n  }\n  \n  @action\n  async login() {\n    const body: LoginSignupRequestDto = {\n      email: this.email,\n      password: this.password\n    };\n    const response = await this.authService.login(body);\n    this.setToken(response.data.data.token);\n  }\n\n  @action\n  async checkLogin(){\n    const response = await this.authService.checkLogin();\n    console.log(response)\n\n  }\n\n  @action\n  async logout(){\n    window.sessionStorage.removeItem('jwt');\n    this.token = null;\n    this.auth = undefined;\n    // 향후 localStorage or cookie 형태로 바꾸기..\n    // const response = await this.authService.logout();\n    // console.log(response)\n  }\n\n  async register(auth: LoginSignupRequestDto) {\n    return await this.authService.register(auth);\n  }\n\n  @action\n  resetPasswordAndEmail() {\n    this.password = '';\n    this.email = '';\n  }\n\n  @action\n  setPassword(pw: string) {\n    this.password = pw;\n  }\n\n  @action\n  setEmail(email: string) {\n    this.email = email;\n  }\n\n  @action\n  setToken(token: string) {\n    this.token = token;\n    this.auth = jwtDecode(token) as Auth\n  }\n}\n\nexport default AuthStore;","import { action, observable } from 'mobx';\nimport autobind from 'autobind-decorator';\nimport MemoService,{ MemoDTO } from '../../services/MemoService'\nimport { ISOStringToJsDate } from '../../components/utils';\n\n@autobind\nclass MemoStore{\n  @observable memos:MemoDTO[] = []\n  @observable memo:MemoDTO = {} as MemoDTO\n  @observable selectedId:number = 0;\n  @observable selectedIndex:number = 0;\n\n  constructor(private memoService:MemoService){\n  }\n\n  @action\n  async getMemoList(){\n    console.log(\"getMemoList\")\n    const response = await this.memoService.getMemoList()\n    const list = response.data.data\n    this.setMemos(list)\n    this.getRecentUpdatedMemo()\n  }\n\n  @action\n  async newMemo(){\n    console.log(\"newMemo\")\n    const response = await this.memoService.registerMemo({title:'', contents:''})\n    console.log(response.data.msg)\n    await this.getMemoList()\n    this.selectedId = response.data.data.id\n    this.getMemoById(this.selectedId)\n\n  }\n\n  @action\n  async deleteMemo(id:number){\n    console.log('deletememo')\n    await this.memoService.deleteMemo(id)\n    await this.getMemoList();\n    this.getRecentUpdatedMemo()\n  }\n\n  @action\n  async updateMemo(){\n    console.log(\"updatememo\")\n    await this.memoService.updateMemo(this.memo)\n  }\n\n  //최신 메모 선택하는 함수\n  @action\n  getRecentUpdatedMemo(){\n    const tempMemos = this.memos\n    if(tempMemos.length>0){\n      const lastId = tempMemos.sort((a,b)=> ISOStringToJsDate(b.updatedAt)-ISOStringToJsDate(a.updatedAt))[0].id\n      this.getMemoById(lastId)\n    }\n  }\n\n  // id 로 메모를 불러오는 함수\n  @action\n  getMemoById(id:number){\n    console.log(\"getmemo\")\n    this.selectedId = id;\n    const tempMemo = this.memos.find((item)=>item.id === id)\n    if(tempMemo){\n      this.setMemo(tempMemo)\n    }\n  }\n\n  @action\n  setMemo(memo:MemoDTO){\n    console.log(\"setMemo\")\n    console.log(memo)\n    this.memo = memo\n    this.setIndex()\n  }\n\n  @action\n  setMemos(memos:MemoDTO[]){\n    console.log(\"setMemos\")\n    this.memos = memos;\n  }\n\n  @action\n  setIndex(){\n    const tempMemo = this.memos.find((item)=>item.id === this.selectedId)\n    if(tempMemo){\n      const index = this.memos.indexOf(tempMemo)\n      this.selectedIndex = index\n      console.log(\"current index\",index)\n    }\n  }\n\n  @action\n  syncTitle(title:string){\n    this.memos.splice(this.selectedIndex,1,{...this.memo, title:title})\n  }\n\n  @action\n  syncContents(contents:string){\n    this.memos.splice(this.selectedIndex,1,{...this.memo, contents:contents})\n  }\n}\n\nexport default MemoStore","import axios from 'axios'\nimport {ApiResponse} from './types'\nimport AuthStore from '../stores/auth/AuthStore'\n\nexport type MemoRegistrationDTO ={\n  id?: number;\n  userId? :number;\n  title: string;\n  contents: string; \n}\n\nexport type MemoUpdateDTO ={\n  id: number;\n  userId? :number;\n  title: string;\n  contents: string; \n}\n\nexport type MemoDTO = {\n  id : number;\n  title : string\n  userId?: number;\n  contents : string\n  createdAt : string;\n  updatedAt : string;\n}\n\nconst API_HOST = process.env.API_HOST || 'http://localhost:4000/api';\n\nclass memoService {\n\n  constructor(private authStore: AuthStore) {\n  }\n\n  async getMemoList(): Promise<ApiResponse<MemoDTO[]>> {\n    if (this.authStore.auth == null) {\n      throw new Error('need to login!');\n    }\n   const userId = this.authStore.auth.id\n    return axios.get(`${API_HOST}/memos/${userId}`);\n  }\n\n  async registerMemo(body: MemoRegistrationDTO):Promise<ApiResponse<MemoDTO>>{\n    if (this.authStore.auth == null) {\n      throw new Error('need to login!');\n    }\n    \n    const formData = new FormData();\n    formData.append('userId', String(this.authStore.auth.id));\n    formData.append('title', body.title);\n    formData.append('contents', body.contents);\n\n    return axios.post<MemoRegistrationDTO, ApiResponse<MemoDTO>>(`${API_HOST}/memos`, formData, {\n      headers: {'Content-Type': 'multipart/form-data' }\n    })\n  }\n\n  async updateMemo(body: MemoUpdateDTO):Promise<ApiResponse<MemoDTO>>{\n    if (this.authStore.auth == null) {\n      throw new Error('need to login!');\n    }\n    const req = {title:body.title, contents:body.contents}\n\n    return axios.patch<MemoUpdateDTO, ApiResponse<MemoDTO>>(`${API_HOST}/memos/${body.id}`,req)\n  }\n\n  async deleteMemo(id:number):Promise<ApiResponse<MemoDTO>> {\n    return axios.delete(`${API_HOST}/memos/${id}`)\n  }\n}\n\nexport default memoService;","import AuthStore from './auth/AuthStore'\nimport MemoStore from \"./memo/MemoStores\";\nimport MemoService from '../services/MemoService'\n\nexport default class RootStore {\n  static instance: RootStore;\n  authStore = new AuthStore();\n  memoStore = new MemoStore(new MemoService(this.authStore))\n}","import * as React from 'react';\nimport { Provider } from 'mobx-react';\nimport RootStore from '../stores/RootStore';\n\ninterface IStoreProviderProps {}\n\nconst rootStore = new RootStore();\n\nconst StoreProvider: React.FunctionComponent<IStoreProviderProps> = ({\n  children\n}) => <Provider {...rootStore}>{children}</Provider>;\n\nexport default StoreProvider;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport StoreProvider from './providers/StoreProvider';\n\nReactDOM.render(\n  <StoreProvider>\n    <App />\n  </StoreProvider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/pen.f1830e2f.svg\";","module.exports = __webpack_public_path__ + \"static/media/trashcan.d7bec4e6.svg\";"],"sourceRoot":""}